# 1、导入numpy作为np，并查看版本
# **难度等级：**L1 **问题：**将numpy导入为 np 并打印版本号。
import numpy as np
print(np.__version__)

# 2、如何创建一维数组？
# **难度等级：**L1 **问题：**创建从0到9的一维数字数组
# 期望输出：
# > array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
a = np.arange(0,10)
print(a)
# 3. 如何创建一个布尔数组？
# **难度等级：**L1
# **问题：**创建一个numpy数组元素值全为True（真）的数组
b = np.full((3,3),True,dtype=bool)
c = np.ones((3,3),dtype=bool)
print(b,c)
# 4. 如何从一维数组中提取满足指定条件的元素？
# **难度等级：**L1
# **问题：**从 arr 中提取所有的奇数
# arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# 期望的输出：
# > array([1, 3, 5, 7, 9])
print(a[1::2])
print(a[a%2 == 1])
# 5. 如何用numpy数组中的另一个值替换满足条件的元素项？
# **难度等级：**L1
# **问题：**将arr中的所有奇数替换为-1。
# 给定：
# arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# 期望的输出：
# >  array([ 0, -1,  2, -1,  4, -1,  6, -1,  8, -1])
# a[a%2 == 1] = -1
# a[1::2] = -1
# print(a)
# 6. 如何在不影响原始数组的情况下替换满足条件的元素项？
# **难度等级：**L2
# **问题：**将arr中的所有奇数替换为-1，而不改变arr。
# 给定：
# arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# 期望的输出：
# >  array([ 0, -1,  2, -1,  4, -1,  6, -1,  8, -1])
d = np.where(a%2 == 1,-1,a)
print(d)
# 7. 如何改变数组的形状？
# **难度等级：**L1
# **问题：**将一维数组转换为2行的2维数组
# 给定：
# np.arange(10)
# > array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# 期望的输出：
# > array([[0, 1, 2, 3, 4],
# >        [5, 6, 7, 8, 9]])
print(a.reshape(2,5))
# 8. 如何垂直叠加两个数组？
# **难度等级：**L2
# **问题：**垂直堆叠数组a和数组b
# 给定：
# a = np.arange(10).reshape(2,-1)
# b = np.repeat(1, 10).reshape(2,-1)
# 期望的输出：
# > array([[0, 1, 2, 3, 4],
# >        [5, 6, 7, 8, 9],
# >        [1, 1, 1, 1, 1],
# >        [1, 1, 1, 1, 1]])
# m = np.arange(10).reshape(2,-1)
# n = np.repeat(1,10).reshape(2,-1)
# print(np.vstack((m,n)))
# 9. 如何水平叠加两个数组？
# **难度等级：**L2
# **问题：**将数组a和数组b水平堆叠。
# 给定：
# a = np.arange(10).reshape(2,-1)
# b = np.repeat(1, 10).reshape(2,-1)
# 期望的输出：
# > array([[0, 1, 2, 3, 4, 1, 1, 1, 1, 1],
# >        [5, 6, 7, 8, 9, 1, 1, 1, 1, 1]])
m = np.arange(10).reshape(2,-1)
n = np.repeat(1,10).reshape(2,-1)
print(np.hstack((m,n)))

# 10. 如何在无硬编码的情况下生成numpy中的自定义序列？
# **难度等级：**L2
# **问题：**创建以下模式而不使用硬编码。只使用numpy函数和下面的输入数组a。
# 给定：
# a = np.array([1,2,3])`
# 期望的输出：
# > array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])
s = np.array([1,2,3])
print(np.r_[np.repeat(s, 3), np.tile(s, 3)])